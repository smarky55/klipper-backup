[idle_timeout]
gcode:
  M84
  TURN_OFF_HEATERS
  UPDATE_DELAYED_GCODE ID=delayed_printer_off DURATION=60

[gcode_macro START_PRINT]
gcode:
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
  {% set material = printer["gcode_macro SET_MATERIAL"] %}
  RESPOND MSG="Material={material.material}"
  BED_MESH_CLEAR
  # Start bed heating
  M140 S{BED_TEMP}
  # Use absolute coordinates
  G90
  # Reset the G-Code Z offset (adjust Z offset if needed)
  SET_GCODE_OFFSET Z=0.0
  # Home the printer in X & Y
  G28 X Y
  # Wait for bed to reach temperature
  M190 S{BED_TEMP}
  # Wait for the temperature to normalise
  RESPOND MSG="Waiting for 3 minutes for temperature to normalise"
  G4 P180000
  # Start heating hotend
  M104 S{EXTRUDER_TEMP}
  # Enable filter
  SET_PIN PIN=nevermore VALUE={material.filtration_enable}
  # Probe Z
  G28 Z
  BED_MESH_CALIBRATE ADAPTIVE=1 PROFILE=adaptive
  SMART_PARK
  # Set and wait for nozzle to reach temperature
  M109 S{EXTRUDER_TEMP}
  # Reset extruder
  G92 E0.0
  # Enable Skew correction
  SKEW_PROFILE LOAD=CaliFlower
  # Set pressure advance
  SET_PRESSURE_ADVANCE ADVANCE={material.pressure_advance}
  # Do purge
  LINE_PURGE
  
[delayed_gcode DISABLE_FILTRATION]
gcode:
  SET_PIN PIN=nevermore VALUE=0

[gcode_macro END_PRINT]
gcode:
  {% set material = printer["gcode_macro SET_MATERIAL"] %}
  # Turn off bed, extruder, and fan
  M140 S0
  M104 S0
  M106 S0
  # Move nozzle away from print while retracting
  G91
  G1 X-2 Y-2 E-5 F300
  # Raise nozzle by 10mm
  G1 Z10 F3000
  G90
  # Clear skew compensation
  SET_SKEW CLEAR=1
  # Disable filter if needed
  {% if material.filtration_enable %}
    # Schedule filter to turn off after 60s
    UPDATE_DELAYED_GCODE ID=DISABLE_FILTRATION DURATION=60
  {% endif %}
  # Present the print
  G1 Y220
  # Disable steppers
  M84

[delayed_gcode delayed_printer_off]
initial_duration: 0.
gcode:
  {% if printer.idle_timeout.state == "Idle" %}
    IDLE_POWER_OFF
  {% endif %}

[gcode_macro POWER_OFF_PRINTER]
gcode:
  {action_call_remote_method(
    "set_device_power", device="homeassistant_switch", state="off"
  )}

[gcode_macro SET_IDLE_POWER_OFF]
gcode: 
  {% set ENABLE = params.ENABLE|default(1)|int !=0 %}
  SET_GCODE_VARIABLE MACRO=IDLE_POWER_OFF VARIABLE=enable VALUE={ENABLE}
  RESPOND MSG="Idle power off: {ENABLE}"

[gcode_macro IDLE_POWER_OFF]
variable_enable: False
gcode:
  {% if enable %}
    POWER_OFF_PRINTER
  {% endif %}